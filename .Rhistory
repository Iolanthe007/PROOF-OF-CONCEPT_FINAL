library(yaml)
library(base64enc)
library(magick)
options(warn=-1)
all_yaml_files <- dir(path="data", pattern=".yml", full.names = TRUE)
for (this_yaml_file in all_yaml_files)
{
yamldata <- yaml.load_file(this_yaml_file)
for (source in yamldata$files$sources)
{
imageData <- (source$dataURL)
imagesource <- gsub("^data.*base64, *", "", imageData)
decodedimagesource <- base64decode(imagesource)
writeBin(decodedimagesource, file.path("output_data", paste(source$title,".png")))
}
}
setwd("~/Proof-of-Concept/PROOF-OF-CONCEPT_FINAL/RSTUDIO")
library(yaml)
library(base64enc)
library(magick)
options(warn=-1)
all_yaml_files <- dir(path="data", pattern=".yml", full.names = TRUE)
for (this_yaml_file in all_yaml_files)
{
yamldata <- yaml.load_file(this_yaml_file)
for (source in yamldata$files$sources)
{
imageData <- (source$dataURL)
imagesource <- gsub("^data.*base64, *", "", imageData)
decodedimagesource <- base64decode(imagesource)
writeBin(decodedimagesource, file.path("output_data", paste(source$title,".png")))
}
}
library(yaml)
library(base64enc)
library(magick)
options(warn=-1)
all_yaml_files <- dir(path="data", pattern=".yml", full.names = TRUE)
for (this_yaml_file in all_yaml_files)
{
yamldata <- yaml.load_file(this_yaml_file)
for (source in yamldata$files$sources)
{
imageData <- (source$dataURL)
imagesource <- gsub("^data.*base64, *", "", imageData)
decodedimagesource <- base64decode(imagesource)
writeBin(decodedimagesource, file.path("output_data", paste(source$title,".png")))
}
}
setwd("~/Proof-of-Concept/PROOF-OF-CONCEPT_FINAL/RSTUDIO")
library(yaml)
library(base64enc)
library(magick)
options(warn=-1)
all_yaml_files <- dir(path="data", pattern=".yml", full.names = TRUE)
for (this_yaml_file in all_yaml_files)
{
yamldata <- yaml.load_file(this_yaml_file)
for (source in yamldata$files$sources)
{
imageData <- (source$dataURL)
imagesource <- gsub("^data.*base64, *", "", imageData)
decodedimagesource <- base64decode(imagesource)
writeBin(decodedimagesource, file.path("output_data", paste(source$title,".png")))
}
}
library(yaml)
options(warn=-1)
# ignores warnings
# Calculate Number of records
yamldata1 <- yaml.load_file(file.path("data","incorrect-gardiner-codes.yml"))
NumberOfRecords <- 0
for (sentence in yamldata1$project$sentences)
{
for (word in sentence$words)
{
for (glyph in word$glyphs)
{
NumberOfRecords <- NumberOfRecords + 1
}
}
}
print(NumberOfRecords)
# Parse 1st file
DataVector1 <- vector("character", length = 0)
for (sentence in yamldata1$project$sentences)
{
for (word in sentence$words)
{
for (glyph in word$glyphs)
{
DataVector1 <- c(DataVector1, glyph$gardinerCode)
}
}
}
print(DataVector1)
# Parse 2nd file
yamldata2 <- yaml.load_file(file.path("data","correct-gardiner-codes.yml"))
DataVector2 <-vector("character", length = 0)
for (sentence in yamldata2$project$sentences)
{
for (word in sentence$words)
{
for (glyph in word$glyphs)
{
DataVector2 <- c(DataVector2, glyph$gardinerCode)
}
}
}
print(DataVector1)
print(DataVector2)
# Count exact matches for file 1 to file 2
Count <- 1
MatchCount <- 0
while (Count <= NumberOfRecords)
{
if(DataVector1[Count] == DataVector2[Count])
{
MatchCount <- MatchCount + 1
}
print(DataVector1[Count])
print(DataVector2[Count])
print(Count)
print(MatchCount)
Count <- Count + 1
}
# Print functions help see what's happening as it goes
# Calculate Percentage
PercentMatch <- MatchCount/NumberOfRecords*100
print(format(PercentMatch, digits=2, nsmall=2))
# Voila
test_file("scripts/Unit Testing Code.R")
library(testthat)
test_filename <- "incorrect-gardiner-codes.yml"
count_NumberOfRecords <- function(filename)
{
yamldata <- yaml.load_file(file.path("data",filename))
NumberOfRecords <- 0
for (sentence in yamldata$project$sentences)
{
for (word in sentence$words)
{
for (glyph in word$glyphs)
{
NumberOfRecords <- NumberOfRecords + 1
}
}
}
return(NumberOfRecords)
}
count_NumberOfRecords(test_filename)
test_that("create vector", expect_equal(count_NumberOfRecords("incorrect-gardiner-codes.yml"), 12))
test_file("scripts/Unit Testing Code.R")
test_file("scripts/Unit-Testing-Code.R")
download.packages(yaml)
download.packages(base64enc)
library(yaml)
library(base64enc)
options(warn=-1)
all_yaml_files <- dir(path="data", pattern=".yml", full.names = TRUE)
for (this_yaml_file in all_yaml_files)
{
yamldata <- yaml.load_file(this_yaml_file)
for (source in yamldata$files$sources)
{
imageData <- (source$dataURL)
imagesource <- gsub("^data.*base64, *", "", imageData)
decodedimagesource <- base64decode(imagesource)
writeBin(decodedimagesource, file.path("output_data", paste(source$title,".png")))
}
}
download.packages(yaml)
download.packages(base64enc)
#downloading in case Code Ocean doesn't work
library(yaml)
library(base64enc)
options(warn=-1)
all_yaml_files <- dir(path="data", pattern=".yml", full.names = TRUE)
for (this_yaml_file in all_yaml_files)
{
yamldata <- yaml.load_file(this_yaml_file)
for (source in yamldata$files$sources)
{
imageData <- (source$dataURL)
imagesource <- gsub("^data.*base64, *", "", imageData)
decodedimagesource <- base64decode(imagesource)
writeBin(decodedimagesource, file.path("output_data", paste(source$title,".png")))
}
}
library(yaml)
options(warn=-1)
# ignores warnings
# Calculate Number of records
yamldata1 <- yaml.load_file(file.path("data","incorrect-gardiner-codes.yml"))
NumberOfRecords <- 0
for (sentence in yamldata1$project$sentences)
{
for (word in sentence$words)
{
for (glyph in word$glyphs)
{
NumberOfRecords <- NumberOfRecords + 1
}
}
}
print(NumberOfRecords)
# Parse 1st file
DataVector1 <- vector("character", length = 0)
for (sentence in yamldata1$project$sentences)
{
for (word in sentence$words)
{
for (glyph in word$glyphs)
{
DataVector1 <- c(DataVector1, glyph$gardinerCode)
}
}
}
print(DataVector1)
# Parse 2nd file
yamldata2 <- yaml.load_file(file.path("data","correct-gardiner-codes.yml"))
DataVector2 <-vector("character", length = 0)
for (sentence in yamldata2$project$sentences)
{
for (word in sentence$words)
{
for (glyph in word$glyphs)
{
DataVector2 <- c(DataVector2, glyph$gardinerCode)
}
}
}
print(DataVector1)
print(DataVector2)
# Count exact matches for file 1 to file 2
Count <- 1
MatchCount <- 0
while (Count <= NumberOfRecords)
{
if(DataVector1[Count] == DataVector2[Count])
{
MatchCount <- MatchCount + 1
}
print(DataVector1[Count])
print(DataVector2[Count])
print(Count)
print(MatchCount)
Count <- Count + 1
}
# Print functions help see what's happening as it goes
# Calculate Percentage
PercentMatch <- MatchCount/NumberOfRecords*100
print(format(PercentMatch, digits=2, nsmall=2))
# Voila
download.packages(testthat)
library(testthat)
test_filename <- "incorrect-gardiner-codes.yml"
count_NumberOfRecords <- function(filename)
{
yamldata <- yaml.load_file(file.path("data",filename))
NumberOfRecords <- 0
for (sentence in yamldata$project$sentences)
{
for (word in sentence$words)
{
for (glyph in word$glyphs)
{
NumberOfRecords <- NumberOfRecords + 1
}
}
}
return(NumberOfRecords)
}
count_NumberOfRecords(test_filename)
test_that("create vector", expect_equal(count_NumberOfRecords("incorrect-gardiner-codes.yml"), 12))
test_file("scripts/Unit-Testing-Code.R")
download.packages(yaml)
download.packages(base64enc)
#downloading in case Code Ocean doesn't work
library(yaml)
library(base64enc)
options(warn=-1)
all_yaml_files <- dir(path="data", pattern=".yml", full.names = TRUE)
for (this_yaml_file in all_yaml_files)
{
yamldata <- yaml.load_file(this_yaml_file)
for (source in yamldata$files$sources)
{
imageData <- (source$dataURL)
imagesource <- gsub("^data.*base64, *", "", imageData)
decodedimagesource <- base64decode(imagesource)
writeBin(decodedimagesource, file.path("output_data", paste(source$title,".png")))
}
}
library(yaml)
library(base64enc)
options(warn=-1)
all_yaml_files <- dir(path="data", pattern=".yml", full.names = TRUE)
for (this_yaml_file in all_yaml_files)
{
yamldata <- yaml.load_file(this_yaml_file)
for (source in yamldata$files$sources)
{
imageData <- (source$dataURL)
imagesource <- gsub("^data.*base64, *", "", imageData)
decodedimagesource <- base64decode(imagesource)
writeBin(decodedimagesource, file.path("output_data", paste(source$title,".png")))
}
}
install.packages("yaml")
download.packages(testthat)
library(testthat)
test_filename <- "incorrect-gardiner-codes.yml"
count_NumberOfRecords <- function(filename)
{
yamldata <- yaml.load_file(file.path("data",filename))
NumberOfRecords <- 0
for (sentence in yamldata$project$sentences)
{
for (word in sentence$words)
{
for (glyph in word$glyphs)
{
NumberOfRecords <- NumberOfRecords + 1
}
}
}
return(NumberOfRecords)
}
count_NumberOfRecords(test_filename)
test_that("create vector", expect_equal(count_NumberOfRecords("incorrect-gardiner-codes.yml"), 12))
library(testthat)
test_filename <- "incorrect-gardiner-codes.yml"
count_NumberOfRecords <- function(filename)
{
yamldata <- yaml.load_file(file.path("data",filename))
NumberOfRecords <- 0
for (sentence in yamldata$project$sentences)
{
for (word in sentence$words)
{
for (glyph in word$glyphs)
{
NumberOfRecords <- NumberOfRecords + 1
}
}
}
return(NumberOfRecords)
}
count_NumberOfRecords(test_filename)
test_that("create vector", expect_equal(count_NumberOfRecords("incorrect-gardiner-codes.yml"), 12))
test_file("scripts/Unit-Testing-Code.R")
library(yaml)
library(testthat)
test_filename <- "incorrect-gardiner-codes.yml"
count_NumberOfRecords <- function(filename)
{
yamldata <- yaml.load_file(file.path("data",filename))
NumberOfRecords <- 0
for (sentence in yamldata$project$sentences)
{
for (word in sentence$words)
{
for (glyph in word$glyphs)
{
NumberOfRecords <- NumberOfRecords + 1
}
}
}
return(NumberOfRecords)
}
count_NumberOfRecords(test_filename)
test_that("create vector", expect_equal(count_NumberOfRecords("incorrect-gardiner-codes.yml"), 12))
test_file("scripts/Unit-Testing-Code.R")
library(yaml)
library(base64enc)
options(warn=-1)
all_yaml_files <- dir(path="data", pattern=".yml", full.names = TRUE)
for (this_yaml_file in all_yaml_files)
{
yamldata <- yaml.load_file(this_yaml_file)
for (source in yamldata$files$sources)
{
imageData <- (source$dataURL)
imagesource <- gsub("^data.*base64, *", "", imageData)
decodedimagesource <- base64decode(imagesource)
writeBin(decodedimagesource, file.path("output_data", paste(source$title,".png")))
}
}
library(yaml)
options(warn=-1)
# ignores warnings
# Calculate Number of records
yamldata1 <- yaml.load_file(file.path("data","incorrect-gardiner-codes.yml"))
NumberOfRecords <- 0
for (sentence in yamldata1$project$sentences)
{
for (word in sentence$words)
{
for (glyph in word$glyphs)
{
NumberOfRecords <- NumberOfRecords + 1
}
}
}
print(NumberOfRecords)
# Parse 1st file
DataVector1 <- vector("character", length = 0)
for (sentence in yamldata1$project$sentences)
{
for (word in sentence$words)
{
for (glyph in word$glyphs)
{
DataVector1 <- c(DataVector1, glyph$gardinerCode)
}
}
}
print(DataVector1)
# Parse 2nd file
yamldata2 <- yaml.load_file(file.path("data","correct-gardiner-codes.yml"))
DataVector2 <-vector("character", length = 0)
for (sentence in yamldata2$project$sentences)
{
for (word in sentence$words)
{
for (glyph in word$glyphs)
{
DataVector2 <- c(DataVector2, glyph$gardinerCode)
}
}
}
print(DataVector1)
print(DataVector2)
# Count exact matches for file 1 to file 2
Count <- 1
MatchCount <- 0
while (Count <= NumberOfRecords)
{
if(DataVector1[Count] == DataVector2[Count])
{
MatchCount <- MatchCount + 1
}
print(DataVector1[Count])
print(DataVector2[Count])
print(Count)
print(MatchCount)
Count <- Count + 1
}
# Print functions help see what's happening as it goes
# Calculate Percentage
PercentMatch <- MatchCount/NumberOfRecords*100
print(format(PercentMatch, digits=2, nsmall=2))
# Voila
library(yaml)
library(testthat)
test_filename <- "incorrect-gardiner-codes.yml"
count_NumberOfRecords <- function(filename)
{
yamldata <- yaml.load_file(file.path("data",filename))
NumberOfRecords <- 0
for (sentence in yamldata$project$sentences)
{
for (word in sentence$words)
{
for (glyph in word$glyphs)
{
NumberOfRecords <- NumberOfRecords + 1
}
}
}
return(NumberOfRecords)
}
count_NumberOfRecords(test_filename)
test_that("create vector", expect_equal(count_NumberOfRecords("incorrect-gardiner-codes.yml"), 12))
test_file("scripts/Unit-Testing-Code.R")
